%{
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include "output.h"
#include "splash_helper.h"
void yyerror(const char* msg) {
    fprintf(stderr, "%s\n", msg);
    helper_error = 1;
    error_message = malloc(sizeof(char) * (strlen(msg) + 1));
    strcpy(error_message, msg);
}
extern FILE *yyin;
int yylex(void);
//void yyerror(void);
%}

%define api.value.type union


%type <Operand> expr_
%type <Operand> expr
%type <Operand> param
%type <Comparison> comp

%token <char100> STR
%token <char100> NUM
%token ATT
%token IF
%token ELSE
%token AND
%token OR
%token EQ
%token LT
%token LE
%token GT
%token GE
%token <char100> ID

%left LT LE EQ
%right ATT
%left '+' '-'
%right UMINUS
%left '*' '/' '%'
%right '^'

%%

prog        : stat_list { YYACCEPT; }
            | error new_line { yyerror("Invalid Syntax"); YYABORT; }
            ;

stat_list   : stat_list stat new_line {}
            | stat_list new_line {}
            | %empty
            ;

new_line    : '\n'
            | '\r'
            ;

stat        : expr  { DEBUGPRINT("<reduced expr_>\n"); }
            | attrib  { DEBUGPRINT("<reduced attrib>\n"); }
            | cond  { DEBUGPRINT("<reduced cond>\n"); }
            ;

attrib      : ID ATT expr  { place_set_variable($1); }
            ;

cond        : IF comp { increment_if_count(); append_cond_control(); append_conditional($2); }
            '{'
                stat_list
            '}' { close_scope(); }
            opt_else_if
            ;

opt_else_if : ELSE IF comp { append_else(); append_conditional($3); }
            '{'
                stat_list
            '}' { close_scope(); close_scope(); }
            opt_else_if
            | opt_else
            ;

opt_else    : ELSE { append_else(); }
            '{'
            stat_list
            '}' { close_scope(); }
            | %empty
            ;

comp        : expr_ EQ expr_  { append_comparison(&$$, comp_op_eq, $1, $3); }
            | expr_ LT expr_  { append_comparison(&$$, comp_op_lt, $1, $3); }
            | expr_ GT expr_  { append_comparison(&$$, comp_op_gt, $1, $3); }
            | '(' comp ')'  { $$ = $2; }
            ;

expr        : expr_  { $$ = $1; place_operand($1, false); }
            ;

expr_       : expr_[left] '+' expr_[right]  { append_operation(&$$, '+', $[left], $[right]);  }
            | expr_[left] '-' expr_[right]  { append_operation(&$$, '-', $[left], $[right]);  }
            | expr_[left] '*' expr_[right]  { append_operation(&$$, '*', $[left], $[right]);  }
            | expr_[left] '/' expr_[right]  { append_operation(&$$, '/', $[left], $[right]);  }
            | expr_[left] '%' expr_[right]  { append_operation(&$$, '%', $[left], $[right]);  }
            | expr_[left] '^' expr_[right]  { append_operation(&$$, '^', $[left], $[right]);  }
            | '(' expr_ ')'                 { $$ = $2; }
            | '-' expr_ %prec UMINUS        { append_minus_op(&$$, $2); }
            | NUM                           { append_operand(&$$, op_number, $1); }
            | ID                            { append_operand(&$$, op_variable, $1); }
            | ID '(' param ')'              { if (append_func_call(&$$, $1, $3)) {YYABORT;} }
            | STR                           { append_operand(&$$, op_string, $1); }
            ;

param       : expr_
            | %empty                        { append_null_operand(&$$); }
            ;

%%

int
parse(const char *in_file_name, const char *out_file_name, char **error) {
    FILE *fp = init_parse(in_file_name, out_file_name);
    if (!fp) {
        return EXIT_FAILURE;
    }
    yyin = fp;
    int ret = yyparse();
    if (ret == 0 && helper_error == 0) {
        end_parse();
    }

    *error = error_message;
    return ret || helper_error;
}
